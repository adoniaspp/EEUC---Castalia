//
// Generated file, do not edit! Created by opp_msgc 4.1 from src/node/communication/routing/EeucRouting/EeucRoutingFrame.msg.
//

#ifndef _EEUCROUTINGFRAME_M_H_
#define _EEUCROUTINGFRAME_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0401
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "RoutingPacket_m.h"
// }}



/**
 * Enum generated from <tt>src/node/communication/routing/EeucRouting/EeucRoutingFrame.msg</tt> by opp_msgc.
 * <pre>
 * enum EEUCRouting_FrameType
 * {
 * 	EEUC_ROUTING_COMPETE_HEAD_FRAME	= 1;
 * 	EEUC_ROUTING_FINALHEAD_FRAME 	= 2;		
 * 	EEUC_ROUTING_QUITELECTION_FRAME	= 3;		
 * 	EEUC_ROUTING_CH_ADV_FRAME	= 4;
 * 	EEUC_ROUTING_CH_ADV_RELAY_FRAME	= 5;
 * 	EEUC_ROUTING_JOIN_FRAME	= 6;
 * 	EEUC_ROUTING_SCHE_FRAME = 7;
 * 	EEUC_ROUTING_AGGR_FRAME = 8;
 * 	EEUC_ROUTING_DATA_FRAME = 9;	
 * 	MAX_CLUSTER_SIZE 		= 500;
 * };
 * </pre>
 */
enum EEUCRouting_FrameType {
    EEUC_ROUTING_COMPETE_HEAD_FRAME = 1,
    EEUC_ROUTING_FINALHEAD_FRAME = 2,
    EEUC_ROUTING_QUITELECTION_FRAME = 3,
    EEUC_ROUTING_CH_ADV_FRAME = 4,
    EEUC_ROUTING_CH_ADV_RELAY_FRAME = 5,
    EEUC_ROUTING_JOIN_FRAME = 6,
    EEUC_ROUTING_SCHE_FRAME = 7,
    EEUC_ROUTING_AGGR_FRAME = 8,
    EEUC_ROUTING_DATA_FRAME = 9,
    MAX_CLUSTER_SIZE = 500
};

/**
 * Class generated from <tt>src/node/communication/routing/EeucRouting/EeucRoutingFrame.msg</tt> by opp_msgc.
 * <pre>
 * packet EEUCRouting_DataFrame extends RoutingPacket
 * {	
 * 	int EeucRoutingPacketKind enum (EEUCRouting_FrameType);
 * 	int clusterLength;
 * 	int schedule[MAX_CLUSTER_SIZE];		
 * 	RoutingPacket aggregate[];	
 * 	double energy;			
 * 	double rcomp;
 * 	double distanceBS;
 * 	double posX;
 * 	double posY;
 * };
 * </pre>
 */
class EEUCRouting_DataFrame : public ::RoutingPacket
{
  protected:
    int EeucRoutingPacketKind_var;
    int clusterLength_var;
    int schedule_var[MAX_CLUSTER_SIZE];
    ::RoutingPacket *aggregate_var; // array ptr
    unsigned int aggregate_arraysize;
    double energy_var;
    double rcomp_var;
    double distanceBS_var;
    double posX_var;
    double posY_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EEUCRouting_DataFrame&);

  public:
    EEUCRouting_DataFrame(const char *name=NULL, int kind=0);
    EEUCRouting_DataFrame(const EEUCRouting_DataFrame& other);
    virtual ~EEUCRouting_DataFrame();
    EEUCRouting_DataFrame& operator=(const EEUCRouting_DataFrame& other);
    virtual EEUCRouting_DataFrame *dup() const {return new EEUCRouting_DataFrame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getEeucRoutingPacketKind() const;
    virtual void setEeucRoutingPacketKind(int EeucRoutingPacketKind_var);
    virtual int getClusterLength() const;
    virtual void setClusterLength(int clusterLength_var);
    virtual unsigned int getScheduleArraySize() const;
    virtual int getSchedule(unsigned int k) const;
    virtual void setSchedule(unsigned int k, int schedule_var);
    virtual void setAggregateArraySize(unsigned int size);
    virtual unsigned int getAggregateArraySize() const;
    virtual RoutingPacket& getAggregate(unsigned int k);
    virtual const RoutingPacket& getAggregate(unsigned int k) const {return const_cast<EEUCRouting_DataFrame*>(this)->getAggregate(k);}
    virtual void setAggregate(unsigned int k, const RoutingPacket& aggregate_var);
    virtual double getEnergy() const;
    virtual void setEnergy(double energy_var);
    virtual double getRcomp() const;
    virtual void setRcomp(double rcomp_var);
    virtual double getDistanceBS() const;
    virtual void setDistanceBS(double distanceBS_var);
    virtual double getPosX() const;
    virtual void setPosX(double posX_var);
    virtual double getPosY() const;
    virtual void setPosY(double posY_var);
};

inline void doPacking(cCommBuffer *b, EEUCRouting_DataFrame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, EEUCRouting_DataFrame& obj) {obj.parsimUnpack(b);}


#endif // _EEUCROUTINGFRAME_M_H_
